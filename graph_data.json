{"nodes":[{"id":"main.py","name":"main","file":"main.py","type":"module","dead":false,"callCount":0,"className":null,"sourceCode":"\"\"\"\nSample Python project for Code Weaver analysis\nMain entry point with various code patterns\n\"\"\"\n\nfrom utils import calculate_sum, format_output\nfrom models.user import User, AdminUser\nfrom services.data_processor import DataProcessor, DatabaseManager\nfrom api.handlers import UserHandler, AdminHandler, HealthHandler\n\ndef main():\n    \"\"\"Main function that orchestrates the application\"\"\"\n    print(\"Starting Code Weaver Sample Application...\")\n    \n    # Create sample data\n    users = [\n        User(\"Alice\", 25),\n        User(\"Bob\", 30),\n        AdminUser(\"Charlie\", 35, [\"admin\", \"user\"])\n    ]\n    \n    # Initialize services\n    processor = DataProcessor()\n    db_manager = DatabaseManager()\n    db_manager.connect()\n    \n    # Process users\n    processed_data = processor.process_users(users)\n    \n    # Use API handlers\n    user_handler = UserHandler()\n    admin_handler = AdminHandler()\n    health_handler = HealthHandler()\n    \n    # Test API operations\n    for user in users:\n        user_handler.create_user({'name': user.name, 'age': user.age})\n    \n    # Admin operations\n    stats = admin_handler.get_system_stats()\n    health_status = health_handler.check_health()\n    \n    # Calculate and display results\n    total_age = calculate_sum([user.age for user in users])\n    output = format_output(processed_data, total_age)\n    \n    print(output)\n    print(f\"Health Status: {health_status['data']['overall_status']}\")\n    \n    # Call some unused functions for dead code detection\n    unused_function()\n    \ndef unused_function():\n    \"\"\"This function is never called - should be detected as dead code\"\"\"\n    return \"This code is never executed\"\n\ndef another_unused_function():\n    \"\"\"Another unused function for testing\"\"\"\n    result = calculate_complex_operation(10, 20)\n    return f\"Complex result: {result}\"\n\ndef calculate_complex_operation(a, b):\n    \"\"\"This is also unused\"\"\"\n    return a * b + (a - b) ** 2\n\nif __name__ == \"__main__\":\n    main()","size":1.5},{"id":"main.py:main","name":"main","file":"main.py","type":"function","dead":false,"callCount":1,"className":null,"sourceCode":"def main():\n    \"\"\"Main function that orchestrates the application\"\"\"\n    print(\"Starting Code Weaver Sample Application...\")\n    \n    # Create sample data\n    users = [\n        User(\"Alice\", 25),\n        User(\"Bob\", 30),\n        AdminUser(\"Charlie\", 35, [\"admin\", \"user\"])\n    ]\n    \n    # Initialize services\n    processor = DataProcessor()\n    db_manager = DatabaseManager()\n    db_manager.connect()\n    \n    # Process users\n    processed_data = processor.process_users(users)\n    \n    # Use API handlers\n    user_handler = UserHandler()\n    admin_handler = AdminHandler()\n    health_handler = HealthHandler()\n    \n    # Test API operations\n    for user in users:\n        user_handler.create_user({'name': user.name, 'age': user.age})\n    \n    # Admin operations\n    stats = admin_handler.get_system_stats()\n    health_status = health_handler.check_health()\n    \n    # Calculate and display results\n    total_age = calculate_sum([user.age for user in users])\n    output = format_output(processed_data, total_age)\n    \n    print(output)\n    print(f\"Health Status: {health_status['data']['overall_status']}\")\n    \n    # Call some unused functions for dead code detection\n    unused_function()","size":1.7},{"id":"main.py:unused_function","name":"unused_function","file":"main.py","type":"function","dead":false,"callCount":1,"className":null,"sourceCode":"def unused_function():\n    \"\"\"This function is never called - should be detected as dead code\"\"\"\n    return \"This code is never executed\"","size":1.7},{"id":"main.py:another_unused_function","name":"another_unused_function","file":"main.py","type":"function","dead":true,"callCount":0,"className":null,"sourceCode":"def another_unused_function():\n    \"\"\"Another unused function for testing\"\"\"\n    result = calculate_complex_operation(10, 20)\n    return f\"Complex result: {result}\"","size":1.5},{"id":"main.py:calculate_complex_operation","name":"calculate_complex_operation","file":"main.py","type":"function","dead":false,"callCount":1,"className":null,"sourceCode":"def calculate_complex_operation(a, b):\n    \"\"\"This is also unused\"\"\"\n    return a * b + (a - b) ** 2","size":1.7},{"id":"utils.py","name":"utils","file":"utils.py","type":"module","dead":false,"callCount":0,"className":null,"sourceCode":"\"\"\"Utility functions for sample project.\"\"\"\n\n\ndef calculate_sum(numbers):\n    \"\"\"Calculate sum of numbers in a list.\"\"\"\n    return sum(numbers)\n\n\ndef format_output(data, total):\n    \"\"\"Format output string with data and total.\"\"\"\n    return f\"Processed {len(data)} items, total: {total}\"\n\n\ndef helper_function(text):\n    \"\"\"Helper function for text processing.\"\"\"\n    return text.upper()\n\n\ndef unused_helper():\n    \"\"\"This helper is never used - dead code.\"\"\"\n    return \"Never called\"","size":1.5},{"id":"utils.py:calculate_sum","name":"calculate_sum","file":"utils.py","type":"function","dead":false,"callCount":1,"className":null,"sourceCode":"def calculate_sum(numbers):\n    \"\"\"Calculate sum of numbers in a list.\"\"\"\n    return sum(numbers)","size":1.7},{"id":"utils.py:format_output","name":"format_output","file":"utils.py","type":"function","dead":false,"callCount":1,"className":null,"sourceCode":"def format_output(data, total):\n    \"\"\"Format output string with data and total.\"\"\"\n    return f\"Processed {len(data)} items, total: {total}\"","size":1.7},{"id":"utils.py:helper_function","name":"helper_function","file":"utils.py","type":"function","dead":true,"callCount":0,"className":null,"sourceCode":"def helper_function(text):\n    \"\"\"Helper function for text processing.\"\"\"\n    return text.upper()","size":1.5},{"id":"utils.py:unused_helper","name":"unused_helper","file":"utils.py","type":"function","dead":true,"callCount":0,"className":null,"sourceCode":"def unused_helper():\n    \"\"\"This helper is never used - dead code.\"\"\"\n    return \"Never called\"","size":1.5},{"id":"api/handlers.py","name":"handlers","file":"api/handlers.py","type":"module","dead":false,"callCount":0,"className":null,"sourceCode":"\"\"\"API handlers with complex class hierarchies.\"\"\"\n\nfrom typing import Dict, Any, List, Optional\nfrom models.user import User\nfrom services.data_processor import DataProcessor, DatabaseManager\n\n\nclass BaseHandler:\n    \"\"\"Base handler class with common functionality.\"\"\"\n    \n    def __init__(self):\n        \"\"\"Initialize base handler.\"\"\"\n        self.request_count = 0\n        self.logger = self._setup_logger()\n    \n    def _setup_logger(self):\n        \"\"\"Setup logging for handler.\"\"\"\n        # Simulate logger setup\n        return {'level': 'INFO', 'handlers': []}\n    \n    def _log_request(self, method: str, path: str):\n        \"\"\"Log incoming request.\"\"\"\n        self.request_count += 1\n        # Simulate logging\n        \n    def _validate_request(self, data: Dict[str, Any]) -> bool:\n        \"\"\"Validate incoming request data.\"\"\"\n        return isinstance(data, dict) and len(data) > 0\n    \n    def _format_response(self, data: Any, status: str = \"success\") -> Dict[str, Any]:\n        \"\"\"Format API response.\"\"\"\n        return {\n            'status': status,\n            'data': data,\n            'request_id': self._generate_request_id()\n        }\n    \n    def _generate_request_id(self) -> str:\n        \"\"\"Generate unique request ID.\"\"\"\n        return f\"req_{self.request_count}_{hash(self)}\"\n\n\nclass UserHandler(BaseHandler):\n    \"\"\"Handler for user-related API endpoints.\"\"\"\n    \n    def __init__(self):\n        \"\"\"Initialize user handler.\"\"\"\n        super().__init__()\n        self.processor = DataProcessor()\n        self.db_manager = DatabaseManager()\n    \n    def create_user(self, user_data: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Create a new user.\"\"\"\n        self._log_request(\"POST\", \"/users\")\n        \n        if not self._validate_user_data(user_data):\n            return self._format_response(None, \"error\")\n        \n        user = self._create_user_object(user_data)\n        if self.db_manager.save_user(user):\n            return self._format_response(user.get_info())\n        else:\n            return self._format_response(None, \"error\")\n    \n    def get_user(self, user_id: str) -> Dict[str, Any]:\n        \"\"\"Get user by ID.\"\"\"\n        self._log_request(\"GET\", f\"/users/{user_id}\")\n        \n        user_data = self._fetch_user_from_db(user_id)\n        if user_data:\n            processed_data = self.processor.process_users([user_data])\n            return self._format_response(processed_data[0])\n        else:\n            return self._format_response(None, \"not_found\")\n    \n    def update_user(self, user_id: str, update_data: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Update user information.\"\"\"\n        self._log_request(\"PUT\", f\"/users/{user_id}\")\n        \n        if not self._validate_update_data(update_data):\n            return self._format_response(None, \"error\")\n        \n        success = self._perform_user_update(user_id, update_data)\n        return self._format_response({'updated': success})\n    \n    def delete_user(self, user_id: str) -> Dict[str, Any]:\n        \"\"\"Delete user by ID.\"\"\"\n        self._log_request(\"DELETE\", f\"/users/{user_id}\")\n        \n        success = self._perform_user_deletion(user_id)\n        return self._format_response({'deleted': success})\n    \n    def _validate_user_data(self, data: Dict[str, Any]) -> bool:\n        \"\"\"Validate user creation data.\"\"\"\n        required_fields = ['name', 'age']\n        return all(field in data for field in required_fields)\n    \n    def _validate_update_data(self, data: Dict[str, Any]) -> bool:\n        \"\"\"Validate user update data.\"\"\"\n        allowed_fields = ['name', 'age']\n        return any(field in data for field in allowed_fields)\n    \n    def _create_user_object(self, data: Dict[str, Any]) -> User:\n        \"\"\"Create User object from data.\"\"\"\n        return User(data['name'], data['age'])\n    \n    def _fetch_user_from_db(self, user_id: str) -> Optional[User]:\n        \"\"\"Fetch user from database.\"\"\"\n        # Simulate database fetch\n        if user_id:\n            return User(f\"User_{user_id}\", 25)\n        return None\n    \n    def _perform_user_update(self, user_id: str, data: Dict[str, Any]) -> bool:\n        \"\"\"Perform user update operation.\"\"\"\n        # Simulate update operation\n        return self.db_manager.is_connected and len(data) > 0\n    \n    def _perform_user_deletion(self, user_id: str) -> bool:\n        \"\"\"Perform user deletion operation.\"\"\"\n        # Simulate deletion operation\n        return self.db_manager.is_connected and len(user_id) > 0\n\n\nclass AdminHandler(UserHandler):\n    \"\"\"Handler for admin-specific operations.\"\"\"\n    \n    def __init__(self):\n        \"\"\"Initialize admin handler.\"\"\"\n        super().__init__()\n        self.admin_permissions = self._load_admin_permissions()\n    \n    def get_all_users(self) -> Dict[str, Any]:\n        \"\"\"Get all users (admin only).\"\"\"\n        self._log_request(\"GET\", \"/admin/users\")\n        \n        if not self._check_admin_permission(\"read_all\"):\n            return self._format_response(None, \"forbidden\")\n        \n        users = self._fetch_all_users()\n        processed_users = self.processor.process_users(users)\n        return self._format_response(processed_users)\n    \n    def get_system_stats(self) -> Dict[str, Any]:\n        \"\"\"Get system statistics (admin only).\"\"\"\n        self._log_request(\"GET\", \"/admin/stats\")\n        \n        if not self._check_admin_permission(\"system_stats\"):\n            return self._format_response(None, \"forbidden\")\n        \n        stats = self._collect_system_stats()\n        return self._format_response(stats)\n    \n    def bulk_delete_users(self, user_ids: List[str]) -> Dict[str, Any]:\n        \"\"\"Bulk delete users (admin only).\"\"\"\n        self._log_request(\"DELETE\", \"/admin/users/bulk\")\n        \n        if not self._check_admin_permission(\"bulk_delete\"):\n            return self._format_response(None, \"forbidden\")\n        \n        results = self._perform_bulk_deletion(user_ids)\n        return self._format_response(results)\n    \n    def _load_admin_permissions(self) -> List[str]:\n        \"\"\"Load admin permissions.\"\"\"\n        return [\"read_all\", \"system_stats\", \"bulk_delete\", \"user_management\"]\n    \n    def _check_admin_permission(self, permission: str) -> bool:\n        \"\"\"Check if admin has specific permission.\"\"\"\n        return permission in self.admin_permissions\n    \n    def _fetch_all_users(self) -> List[User]:\n        \"\"\"Fetch all users from database.\"\"\"\n        # Simulate fetching all users\n        return [\n            User(\"Admin_User_1\", 30),\n            User(\"Admin_User_2\", 35)\n        ]\n    \n    def _collect_system_stats(self) -> Dict[str, Any]:\n        \"\"\"Collect system statistics.\"\"\"\n        processor_stats = self.processor.get_statistics()\n        return {\n            'total_requests': self.request_count,\n            'processor_stats': processor_stats,\n            'db_connected': self.db_manager.is_connected\n        }\n    \n    def _perform_bulk_deletion(self, user_ids: List[str]) -> Dict[str, Any]:\n        \"\"\"Perform bulk user deletion.\"\"\"\n        deleted_count = 0\n        failed_count = 0\n        \n        for user_id in user_ids:\n            if self._perform_user_deletion(user_id):\n                deleted_count += 1\n            else:\n                failed_count += 1\n        \n        return {\n            'deleted': deleted_count,\n            'failed': failed_count,\n            'total': len(user_ids)\n        }\n\n\nclass HealthHandler(BaseHandler):\n    \"\"\"Handler for system health checks.\"\"\"\n    \n    def __init__(self):\n        \"\"\"Initialize health handler.\"\"\"\n        super().__init__()\n        self.health_checkers = self._initialize_health_checkers()\n    \n    def check_health(self) -> Dict[str, Any]:\n        \"\"\"Perform comprehensive health check.\"\"\"\n        self._log_request(\"GET\", \"/health\")\n        \n        results = {}\n        overall_status = \"healthy\"\n        \n        for checker_name, checker in self.health_checkers.items():\n            try:\n                result = checker()\n                results[checker_name] = result\n                if not result.get('healthy', True):\n                    overall_status = \"unhealthy\"\n            except Exception as e:\n                results[checker_name] = {'healthy': False, 'error': str(e)}\n                overall_status = \"unhealthy\"\n        \n        return self._format_response({\n            'overall_status': overall_status,\n            'checks': results\n        })\n    \n    def _initialize_health_checkers(self) -> Dict[str, callable]:\n        \"\"\"Initialize health check functions.\"\"\"\n        return {\n            'database': self._check_database_health,\n            'processor': self._check_processor_health,\n            'memory': self._check_memory_health\n        }\n    \n    def _check_database_health(self) -> Dict[str, Any]:\n        \"\"\"Check database health.\"\"\"\n        db_manager = DatabaseManager()\n        connected = db_manager.connect()\n        return {\n            'healthy': connected,\n            'status': 'connected' if connected else 'disconnected'\n        }\n    \n    def _check_processor_health(self) -> Dict[str, Any]:\n        \"\"\"Check data processor health.\"\"\"\n        processor = DataProcessor()\n        stats = processor.get_statistics()\n        return {\n            'healthy': True,\n            'processed_count': stats['processed_count']\n        }\n    \n    def _check_memory_health(self) -> Dict[str, Any]:\n        \"\"\"Check memory usage.\"\"\"\n        # Simulate memory check\n        return {\n            'healthy': True,\n            'usage_percent': 45.2\n        }\n\n\ndef create_api_router():\n    \"\"\"Factory function to create API router (never called - dead code).\"\"\"\n    return {\n        'user_handler': UserHandler(),\n        'admin_handler': AdminHandler(),\n        'health_handler': HealthHandler()\n    }","size":1.5},{"id":"api/handlers.py:BaseHandler","name":"BaseHandler","file":"api/handlers.py","type":"class","dead":false,"callCount":0,"className":null,"sourceCode":"class BaseHandler:\n    \"\"\"Base handler class with common functionality.\"\"\"\n    \n    def __init__(self):\n        \"\"\"Initialize base handler.\"\"\"\n        self.request_count = 0\n        self.logger = self._setup_logger()\n    \n    def _setup_logger(self):\n        \"\"\"Setup logging for handler.\"\"\"\n        # Simulate logger setup\n        return {'level': 'INFO', 'handlers': []}\n    \n    def _log_request(self, method: str, path: str):\n        \"\"\"Log incoming request.\"\"\"\n        self.request_count += 1\n        # Simulate logging\n        \n    def _validate_request(self, data: Dict[str, Any]) -> bool:\n        \"\"\"Validate incoming request data.\"\"\"\n        return isinstance(data, dict) and len(data) > 0\n    \n    def _format_response(self, data: Any, status: str = \"success\") -> Dict[str, Any]:\n        \"\"\"Format API response.\"\"\"\n        return {\n            'status': status,\n            'data': data,\n            'request_id': self._generate_request_id()\n        }\n    \n    def _generate_request_id(self) -> str:\n        \"\"\"Generate unique request ID.\"\"\"\n        return f\"req_{self.request_count}_{hash(self)}\"","size":3.0},{"id":"api/handlers.py:BaseHandler.__init__","name":"__init__","file":"api/handlers.py","type":"function","dead":false,"callCount":4,"className":"BaseHandler","sourceCode":"    def __init__(self):\n        \"\"\"Initialize base handler.\"\"\"\n        self.request_count = 0\n        self.logger = self._setup_logger()","size":2.3},{"id":"api/handlers.py:BaseHandler._setup_logger","name":"_setup_logger","file":"api/handlers.py","type":"function","dead":false,"callCount":1,"className":"BaseHandler","sourceCode":"    def _setup_logger(self):\n        \"\"\"Setup logging for handler.\"\"\"\n        # Simulate logger setup\n        return {'level': 'INFO', 'handlers': []}","size":1.7},{"id":"api/handlers.py:BaseHandler._log_request","name":"_log_request","file":"api/handlers.py","type":"function","dead":false,"callCount":8,"className":"BaseHandler","sourceCode":"    def _log_request(self, method: str, path: str):\n        \"\"\"Log incoming request.\"\"\"\n        self.request_count += 1","size":3.1},{"id":"api/handlers.py:BaseHandler._validate_request","name":"_validate_request","file":"api/handlers.py","type":"function","dead":false,"callCount":0,"className":"BaseHandler","sourceCode":"    def _validate_request(self, data: Dict[str, Any]) -> bool:\n        \"\"\"Validate incoming request data.\"\"\"\n        return isinstance(data, dict) and len(data) > 0","size":1.5},{"id":"api/handlers.py:BaseHandler._format_response","name":"_format_response","file":"api/handlers.py","type":"function","dead":false,"callCount":15,"className":"BaseHandler","sourceCode":"    def _format_response(self, data: Any, status: str = \"success\") -> Dict[str, Any]:\n        \"\"\"Format API response.\"\"\"\n        return {\n            'status': status,\n            'data': data,\n            'request_id': self._generate_request_id()\n        }","size":4.5},{"id":"api/handlers.py:BaseHandler._generate_request_id","name":"_generate_request_id","file":"api/handlers.py","type":"function","dead":false,"callCount":1,"className":"BaseHandler","sourceCode":"    def _generate_request_id(self) -> str:\n        \"\"\"Generate unique request ID.\"\"\"\n        return f\"req_{self.request_count}_{hash(self)}\"","size":1.7},{"id":"api/handlers.py:UserHandler","name":"UserHandler","file":"api/handlers.py","type":"class","dead":false,"callCount":2,"className":null,"sourceCode":"class UserHandler(BaseHandler):\n    \"\"\"Handler for user-related API endpoints.\"\"\"\n    \n    def __init__(self):\n        \"\"\"Initialize user handler.\"\"\"\n        super().__init__()\n        self.processor = DataProcessor()\n        self.db_manager = DatabaseManager()\n    \n    def create_user(self, user_data: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Create a new user.\"\"\"\n        self._log_request(\"POST\", \"/users\")\n        \n        if not self._validate_user_data(user_data):\n            return self._format_response(None, \"error\")\n        \n        user = self._create_user_object(user_data)\n        if self.db_manager.save_user(user):\n            return self._format_response(user.get_info())\n        else:\n            return self._format_response(None, \"error\")\n    \n    def get_user(self, user_id: str) -> Dict[str, Any]:\n        \"\"\"Get user by ID.\"\"\"\n        self._log_request(\"GET\", f\"/users/{user_id}\")\n        \n        user_data = self._fetch_user_from_db(user_id)\n        if user_data:\n            processed_data = self.processor.process_users([user_data])\n            return self._format_response(processed_data[0])\n        else:\n            return self._format_response(None, \"not_found\")\n    \n    def update_user(self, user_id: str, update_data: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Update user information.\"\"\"\n        self._log_request(\"PUT\", f\"/users/{user_id}\")\n        \n        if not self._validate_update_data(update_data):\n            return self._format_response(None, \"error\")\n        \n        success = self._perform_user_update(user_id, update_data)\n        return self._format_response({'updated': success})\n    \n    def delete_user(self, user_id: str) -> Dict[str, Any]:\n        \"\"\"Delete user by ID.\"\"\"\n        self._log_request(\"DELETE\", f\"/users/{user_id}\")\n        \n        success = self._perform_user_deletion(user_id)\n        return self._format_response({'deleted': success})\n    \n    def _validate_user_data(self, data: Dict[str, Any]) -> bool:\n        \"\"\"Validate user creation data.\"\"\"\n        required_fields = ['name', 'age']\n        return all(field in data for field in required_fields)\n    \n    def _validate_update_data(self, data: Dict[str, Any]) -> bool:\n        \"\"\"Validate user update data.\"\"\"\n        allowed_fields = ['name', 'age']\n        return any(field in data for field in allowed_fields)\n    \n    def _create_user_object(self, data: Dict[str, Any]) -> User:\n        \"\"\"Create User object from data.\"\"\"\n        return User(data['name'], data['age'])\n    \n    def _fetch_user_from_db(self, user_id: str) -> Optional[User]:\n        \"\"\"Fetch user from database.\"\"\"\n        # Simulate database fetch\n        if user_id:\n            return User(f\"User_{user_id}\", 25)\n        return None\n    \n    def _perform_user_update(self, user_id: str, data: Dict[str, Any]) -> bool:\n        \"\"\"Perform user update operation.\"\"\"\n        # Simulate update operation\n        return self.db_manager.is_connected and len(data) > 0\n    \n    def _perform_user_deletion(self, user_id: str) -> bool:\n        \"\"\"Perform user deletion operation.\"\"\"\n        # Simulate deletion operation\n        return self.db_manager.is_connected and len(user_id) > 0","size":3.4},{"id":"api/handlers.py:UserHandler.__init__","name":"__init__","file":"api/handlers.py","type":"function","dead":false,"callCount":4,"className":"UserHandler","sourceCode":"    def __init__(self):\n        \"\"\"Initialize user handler.\"\"\"\n        super().__init__()\n        self.processor = DataProcessor()\n        self.db_manager = DatabaseManager()","size":2.3},{"id":"api/handlers.py:UserHandler.create_user","name":"create_user","file":"api/handlers.py","type":"function","dead":false,"callCount":1,"className":"UserHandler","sourceCode":"    def create_user(self, user_data: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Create a new user.\"\"\"\n        self._log_request(\"POST\", \"/users\")\n        \n        if not self._validate_user_data(user_data):\n            return self._format_response(None, \"error\")\n        \n        user = self._create_user_object(user_data)\n        if self.db_manager.save_user(user):\n            return self._format_response(user.get_info())\n        else:\n            return self._format_response(None, \"error\")","size":1.7},{"id":"api/handlers.py:UserHandler.get_user","name":"get_user","file":"api/handlers.py","type":"function","dead":false,"callCount":0,"className":"UserHandler","sourceCode":"    def get_user(self, user_id: str) -> Dict[str, Any]:\n        \"\"\"Get user by ID.\"\"\"\n        self._log_request(\"GET\", f\"/users/{user_id}\")\n        \n        user_data = self._fetch_user_from_db(user_id)\n        if user_data:\n            processed_data = self.processor.process_users([user_data])\n            return self._format_response(processed_data[0])\n        else:\n            return self._format_response(None, \"not_found\")","size":1.5},{"id":"api/handlers.py:UserHandler.update_user","name":"update_user","file":"api/handlers.py","type":"function","dead":false,"callCount":0,"className":"UserHandler","sourceCode":"    def update_user(self, user_id: str, update_data: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Update user information.\"\"\"\n        self._log_request(\"PUT\", f\"/users/{user_id}\")\n        \n        if not self._validate_update_data(update_data):\n            return self._format_response(None, \"error\")\n        \n        success = self._perform_user_update(user_id, update_data)\n        return self._format_response({'updated': success})","size":1.5},{"id":"api/handlers.py:UserHandler.delete_user","name":"delete_user","file":"api/handlers.py","type":"function","dead":false,"callCount":0,"className":"UserHandler","sourceCode":"    def delete_user(self, user_id: str) -> Dict[str, Any]:\n        \"\"\"Delete user by ID.\"\"\"\n        self._log_request(\"DELETE\", f\"/users/{user_id}\")\n        \n        success = self._perform_user_deletion(user_id)\n        return self._format_response({'deleted': success})","size":1.5},{"id":"api/handlers.py:UserHandler._validate_user_data","name":"_validate_user_data","file":"api/handlers.py","type":"function","dead":false,"callCount":1,"className":"UserHandler","sourceCode":"    def _validate_user_data(self, data: Dict[str, Any]) -> bool:\n        \"\"\"Validate user creation data.\"\"\"\n        required_fields = ['name', 'age']\n        return all(field in data for field in required_fields)","size":1.7},{"id":"api/handlers.py:UserHandler._validate_update_data","name":"_validate_update_data","file":"api/handlers.py","type":"function","dead":false,"callCount":1,"className":"UserHandler","sourceCode":"    def _validate_update_data(self, data: Dict[str, Any]) -> bool:\n        \"\"\"Validate user update data.\"\"\"\n        allowed_fields = ['name', 'age']\n        return any(field in data for field in allowed_fields)","size":1.7},{"id":"api/handlers.py:UserHandler._create_user_object","name":"_create_user_object","file":"api/handlers.py","type":"function","dead":false,"callCount":1,"className":"UserHandler","sourceCode":"    def _create_user_object(self, data: Dict[str, Any]) -> User:\n        \"\"\"Create User object from data.\"\"\"\n        return User(data['name'], data['age'])","size":1.7},{"id":"api/handlers.py:UserHandler._fetch_user_from_db","name":"_fetch_user_from_db","file":"api/handlers.py","type":"function","dead":false,"callCount":1,"className":"UserHandler","sourceCode":"    def _fetch_user_from_db(self, user_id: str) -> Optional[User]:\n        \"\"\"Fetch user from database.\"\"\"\n        # Simulate database fetch\n        if user_id:\n            return User(f\"User_{user_id}\", 25)\n        return None","size":1.7},{"id":"api/handlers.py:UserHandler._perform_user_update","name":"_perform_user_update","file":"api/handlers.py","type":"function","dead":false,"callCount":1,"className":"UserHandler","sourceCode":"    def _perform_user_update(self, user_id: str, data: Dict[str, Any]) -> bool:\n        \"\"\"Perform user update operation.\"\"\"\n        # Simulate update operation\n        return self.db_manager.is_connected and len(data) > 0","size":1.7},{"id":"api/handlers.py:UserHandler._perform_user_deletion","name":"_perform_user_deletion","file":"api/handlers.py","type":"function","dead":false,"callCount":2,"className":"UserHandler","sourceCode":"    def _perform_user_deletion(self, user_id: str) -> bool:\n        \"\"\"Perform user deletion operation.\"\"\"\n        # Simulate deletion operation\n        return self.db_manager.is_connected and len(user_id) > 0","size":1.9},{"id":"api/handlers.py:AdminHandler","name":"AdminHandler","file":"api/handlers.py","type":"class","dead":false,"callCount":2,"className":null,"sourceCode":"class AdminHandler(UserHandler):\n    \"\"\"Handler for admin-specific operations.\"\"\"\n    \n    def __init__(self):\n        \"\"\"Initialize admin handler.\"\"\"\n        super().__init__()\n        self.admin_permissions = self._load_admin_permissions()\n    \n    def get_all_users(self) -> Dict[str, Any]:\n        \"\"\"Get all users (admin only).\"\"\"\n        self._log_request(\"GET\", \"/admin/users\")\n        \n        if not self._check_admin_permission(\"read_all\"):\n            return self._format_response(None, \"forbidden\")\n        \n        users = self._fetch_all_users()\n        processed_users = self.processor.process_users(users)\n        return self._format_response(processed_users)\n    \n    def get_system_stats(self) -> Dict[str, Any]:\n        \"\"\"Get system statistics (admin only).\"\"\"\n        self._log_request(\"GET\", \"/admin/stats\")\n        \n        if not self._check_admin_permission(\"system_stats\"):\n            return self._format_response(None, \"forbidden\")\n        \n        stats = self._collect_system_stats()\n        return self._format_response(stats)\n    \n    def bulk_delete_users(self, user_ids: List[str]) -> Dict[str, Any]:\n        \"\"\"Bulk delete users (admin only).\"\"\"\n        self._log_request(\"DELETE\", \"/admin/users/bulk\")\n        \n        if not self._check_admin_permission(\"bulk_delete\"):\n            return self._format_response(None, \"forbidden\")\n        \n        results = self._perform_bulk_deletion(user_ids)\n        return self._format_response(results)\n    \n    def _load_admin_permissions(self) -> List[str]:\n        \"\"\"Load admin permissions.\"\"\"\n        return [\"read_all\", \"system_stats\", \"bulk_delete\", \"user_management\"]\n    \n    def _check_admin_permission(self, permission: str) -> bool:\n        \"\"\"Check if admin has specific permission.\"\"\"\n        return permission in self.admin_permissions\n    \n    def _fetch_all_users(self) -> List[User]:\n        \"\"\"Fetch all users from database.\"\"\"\n        # Simulate fetching all users\n        return [\n            User(\"Admin_User_1\", 30),\n            User(\"Admin_User_2\", 35)\n        ]\n    \n    def _collect_system_stats(self) -> Dict[str, Any]:\n        \"\"\"Collect system statistics.\"\"\"\n        processor_stats = self.processor.get_statistics()\n        return {\n            'total_requests': self.request_count,\n            'processor_stats': processor_stats,\n            'db_connected': self.db_manager.is_connected\n        }\n    \n    def _perform_bulk_deletion(self, user_ids: List[str]) -> Dict[str, Any]:\n        \"\"\"Perform bulk user deletion.\"\"\"\n        deleted_count = 0\n        failed_count = 0\n        \n        for user_id in user_ids:\n            if self._perform_user_deletion(user_id):\n                deleted_count += 1\n            else:\n                failed_count += 1\n        \n        return {\n            'deleted': deleted_count,\n            'failed': failed_count,\n            'total': len(user_ids)\n        }","size":3.4},{"id":"api/handlers.py:AdminHandler.__init__","name":"__init__","file":"api/handlers.py","type":"function","dead":false,"callCount":4,"className":"AdminHandler","sourceCode":"    def __init__(self):\n        \"\"\"Initialize admin handler.\"\"\"\n        super().__init__()\n        self.admin_permissions = self._load_admin_permissions()","size":2.3},{"id":"api/handlers.py:AdminHandler.get_all_users","name":"get_all_users","file":"api/handlers.py","type":"function","dead":false,"callCount":0,"className":"AdminHandler","sourceCode":"    def get_all_users(self) -> Dict[str, Any]:\n        \"\"\"Get all users (admin only).\"\"\"\n        self._log_request(\"GET\", \"/admin/users\")\n        \n        if not self._check_admin_permission(\"read_all\"):\n            return self._format_response(None, \"forbidden\")\n        \n        users = self._fetch_all_users()\n        processed_users = self.processor.process_users(users)\n        return self._format_response(processed_users)","size":1.5},{"id":"api/handlers.py:AdminHandler.get_system_stats","name":"get_system_stats","file":"api/handlers.py","type":"function","dead":false,"callCount":1,"className":"AdminHandler","sourceCode":"    def get_system_stats(self) -> Dict[str, Any]:\n        \"\"\"Get system statistics (admin only).\"\"\"\n        self._log_request(\"GET\", \"/admin/stats\")\n        \n        if not self._check_admin_permission(\"system_stats\"):\n            return self._format_response(None, \"forbidden\")\n        \n        stats = self._collect_system_stats()\n        return self._format_response(stats)","size":1.7},{"id":"api/handlers.py:AdminHandler.bulk_delete_users","name":"bulk_delete_users","file":"api/handlers.py","type":"function","dead":false,"callCount":0,"className":"AdminHandler","sourceCode":"    def bulk_delete_users(self, user_ids: List[str]) -> Dict[str, Any]:\n        \"\"\"Bulk delete users (admin only).\"\"\"\n        self._log_request(\"DELETE\", \"/admin/users/bulk\")\n        \n        if not self._check_admin_permission(\"bulk_delete\"):\n            return self._format_response(None, \"forbidden\")\n        \n        results = self._perform_bulk_deletion(user_ids)\n        return self._format_response(results)","size":1.5},{"id":"api/handlers.py:AdminHandler._load_admin_permissions","name":"_load_admin_permissions","file":"api/handlers.py","type":"function","dead":false,"callCount":1,"className":"AdminHandler","sourceCode":"    def _load_admin_permissions(self) -> List[str]:\n        \"\"\"Load admin permissions.\"\"\"\n        return [\"read_all\", \"system_stats\", \"bulk_delete\", \"user_management\"]","size":1.7},{"id":"api/handlers.py:AdminHandler._check_admin_permission","name":"_check_admin_permission","file":"api/handlers.py","type":"function","dead":false,"callCount":3,"className":"AdminHandler","sourceCode":"    def _check_admin_permission(self, permission: str) -> bool:\n        \"\"\"Check if admin has specific permission.\"\"\"\n        return permission in self.admin_permissions","size":2.1},{"id":"api/handlers.py:AdminHandler._fetch_all_users","name":"_fetch_all_users","file":"api/handlers.py","type":"function","dead":false,"callCount":1,"className":"AdminHandler","sourceCode":"    def _fetch_all_users(self) -> List[User]:\n        \"\"\"Fetch all users from database.\"\"\"\n        # Simulate fetching all users\n        return [\n            User(\"Admin_User_1\", 30),\n            User(\"Admin_User_2\", 35)\n        ]","size":1.7},{"id":"api/handlers.py:AdminHandler._collect_system_stats","name":"_collect_system_stats","file":"api/handlers.py","type":"function","dead":false,"callCount":1,"className":"AdminHandler","sourceCode":"    def _collect_system_stats(self) -> Dict[str, Any]:\n        \"\"\"Collect system statistics.\"\"\"\n        processor_stats = self.processor.get_statistics()\n        return {\n            'total_requests': self.request_count,\n            'processor_stats': processor_stats,\n            'db_connected': self.db_manager.is_connected\n        }","size":1.7},{"id":"api/handlers.py:AdminHandler._perform_bulk_deletion","name":"_perform_bulk_deletion","file":"api/handlers.py","type":"function","dead":false,"callCount":1,"className":"AdminHandler","sourceCode":"    def _perform_bulk_deletion(self, user_ids: List[str]) -> Dict[str, Any]:\n        \"\"\"Perform bulk user deletion.\"\"\"\n        deleted_count = 0\n        failed_count = 0\n        \n        for user_id in user_ids:\n            if self._perform_user_deletion(user_id):\n                deleted_count += 1\n            else:\n                failed_count += 1\n        \n        return {\n            'deleted': deleted_count,\n            'failed': failed_count,\n            'total': len(user_ids)\n        }","size":1.7},{"id":"api/handlers.py:HealthHandler","name":"HealthHandler","file":"api/handlers.py","type":"class","dead":false,"callCount":2,"className":null,"sourceCode":"class HealthHandler(BaseHandler):\n    \"\"\"Handler for system health checks.\"\"\"\n    \n    def __init__(self):\n        \"\"\"Initialize health handler.\"\"\"\n        super().__init__()\n        self.health_checkers = self._initialize_health_checkers()\n    \n    def check_health(self) -> Dict[str, Any]:\n        \"\"\"Perform comprehensive health check.\"\"\"\n        self._log_request(\"GET\", \"/health\")\n        \n        results = {}\n        overall_status = \"healthy\"\n        \n        for checker_name, checker in self.health_checkers.items():\n            try:\n                result = checker()\n                results[checker_name] = result\n                if not result.get('healthy', True):\n                    overall_status = \"unhealthy\"\n            except Exception as e:\n                results[checker_name] = {'healthy': False, 'error': str(e)}\n                overall_status = \"unhealthy\"\n        \n        return self._format_response({\n            'overall_status': overall_status,\n            'checks': results\n        })\n    \n    def _initialize_health_checkers(self) -> Dict[str, callable]:\n        \"\"\"Initialize health check functions.\"\"\"\n        return {\n            'database': self._check_database_health,\n            'processor': self._check_processor_health,\n            'memory': self._check_memory_health\n        }\n    \n    def _check_database_health(self) -> Dict[str, Any]:\n        \"\"\"Check database health.\"\"\"\n        db_manager = DatabaseManager()\n        connected = db_manager.connect()\n        return {\n            'healthy': connected,\n            'status': 'connected' if connected else 'disconnected'\n        }\n    \n    def _check_processor_health(self) -> Dict[str, Any]:\n        \"\"\"Check data processor health.\"\"\"\n        processor = DataProcessor()\n        stats = processor.get_statistics()\n        return {\n            'healthy': True,\n            'processed_count': stats['processed_count']\n        }\n    \n    def _check_memory_health(self) -> Dict[str, Any]:\n        \"\"\"Check memory usage.\"\"\"\n        # Simulate memory check\n        return {\n            'healthy': True,\n            'usage_percent': 45.2\n        }","size":3.4},{"id":"api/handlers.py:HealthHandler.__init__","name":"__init__","file":"api/handlers.py","type":"function","dead":false,"callCount":4,"className":"HealthHandler","sourceCode":"    def __init__(self):\n        \"\"\"Initialize health handler.\"\"\"\n        super().__init__()\n        self.health_checkers = self._initialize_health_checkers()","size":2.3},{"id":"api/handlers.py:HealthHandler.check_health","name":"check_health","file":"api/handlers.py","type":"function","dead":false,"callCount":1,"className":"HealthHandler","sourceCode":"    def check_health(self) -> Dict[str, Any]:\n        \"\"\"Perform comprehensive health check.\"\"\"\n        self._log_request(\"GET\", \"/health\")\n        \n        results = {}\n        overall_status = \"healthy\"\n        \n        for checker_name, checker in self.health_checkers.items():\n            try:\n                result = checker()\n                results[checker_name] = result\n                if not result.get('healthy', True):\n                    overall_status = \"unhealthy\"\n            except Exception as e:\n                results[checker_name] = {'healthy': False, 'error': str(e)}\n                overall_status = \"unhealthy\"\n        \n        return self._format_response({\n            'overall_status': overall_status,\n            'checks': results\n        })","size":1.7},{"id":"api/handlers.py:HealthHandler._initialize_health_checkers","name":"_initialize_health_checkers","file":"api/handlers.py","type":"function","dead":false,"callCount":1,"className":"HealthHandler","sourceCode":"    def _initialize_health_checkers(self) -> Dict[str, callable]:\n        \"\"\"Initialize health check functions.\"\"\"\n        return {\n            'database': self._check_database_health,\n            'processor': self._check_processor_health,\n            'memory': self._check_memory_health\n        }","size":1.7},{"id":"api/handlers.py:HealthHandler._check_database_health","name":"_check_database_health","file":"api/handlers.py","type":"function","dead":false,"callCount":0,"className":"HealthHandler","sourceCode":"    def _check_database_health(self) -> Dict[str, Any]:\n        \"\"\"Check database health.\"\"\"\n        db_manager = DatabaseManager()\n        connected = db_manager.connect()\n        return {\n            'healthy': connected,\n            'status': 'connected' if connected else 'disconnected'\n        }","size":1.5},{"id":"api/handlers.py:HealthHandler._check_processor_health","name":"_check_processor_health","file":"api/handlers.py","type":"function","dead":false,"callCount":0,"className":"HealthHandler","sourceCode":"    def _check_processor_health(self) -> Dict[str, Any]:\n        \"\"\"Check data processor health.\"\"\"\n        processor = DataProcessor()\n        stats = processor.get_statistics()\n        return {\n            'healthy': True,\n            'processed_count': stats['processed_count']\n        }","size":1.5},{"id":"api/handlers.py:HealthHandler._check_memory_health","name":"_check_memory_health","file":"api/handlers.py","type":"function","dead":false,"callCount":0,"className":"HealthHandler","sourceCode":"    def _check_memory_health(self) -> Dict[str, Any]:\n        \"\"\"Check memory usage.\"\"\"\n        # Simulate memory check\n        return {\n            'healthy': True,\n            'usage_percent': 45.2\n        }","size":1.5},{"id":"api/handlers.py:create_api_router","name":"create_api_router","file":"api/handlers.py","type":"function","dead":true,"callCount":0,"className":null,"sourceCode":"def create_api_router():\n    \"\"\"Factory function to create API router (never called - dead code).\"\"\"\n    return {\n        'user_handler': UserHandler(),\n        'admin_handler': AdminHandler(),\n        'health_handler': HealthHandler()\n    }","size":1.5},{"id":"api/__init__.py","name":"__init__","file":"api/__init__.py","type":"module","dead":false,"callCount":0,"className":null,"sourceCode":"","size":1.5},{"id":"models/user.py","name":"user","file":"models/user.py","type":"module","dead":false,"callCount":0,"className":null,"sourceCode":"\"\"\"User model for the sample application\"\"\"\n\nclass User:\n    \"\"\"Represents a user in the system\"\"\"\n    \n    def __init__(self, name: str, age: int):\n        self.name = name\n        self.age = age\n        self._id = self._generate_id()\n    \n    def _generate_id(self) -> str:\n        \"\"\"Generate a unique ID for the user\"\"\"\n        return f\"user_{hash(self.name) % 10000}\"\n    \n    def get_info(self) -> dict:\n        \"\"\"Get user information as dictionary\"\"\"\n        return {\n            \"id\": self._id,\n            \"name\": self.name,\n            \"age\": self.age,\n            \"category\": self.get_age_category()\n        }\n    \n    def get_age_category(self) -> str:\n        \"\"\"Categorize user by age\"\"\"\n        if self.age < 20:\n            return \"young\"\n        elif self.age < 65:\n            return \"adult\"\n        else:\n            return \"senior\"\n    \n    def update_age(self, new_age: int):\n        \"\"\"Update user's age\"\"\"\n        self.age = new_age\n    \n    def __str__(self) -> str:\n        return f\"User({self.name}, {self.age})\"\n    \n    def __repr__(self) -> str:\n        return self.__str__()\n\nclass AdminUser(User):\n    \"\"\"Administrative user with special privileges\"\"\"\n    \n    def __init__(self, name: str, age: int, permissions: list = None):\n        super().__init__(name, age)\n        self.permissions = permissions or [\"read\", \"write\"]\n    \n    def has_permission(self, permission: str) -> bool:\n        \"\"\"Check if admin has specific permission\"\"\"\n        return permission in self.permissions\n    \n    def add_permission(self, permission: str):\n        \"\"\"Add a new permission\"\"\"\n        if permission not in self.permissions:\n            self.permissions.append(permission)\n    \n    def get_admin_info(self) -> dict:\n        \"\"\"Get admin-specific information\"\"\"\n        info = self.get_info()\n        info[\"permissions\"] = self.permissions\n        info[\"is_admin\"] = True\n        return info\n\n# This class is never used - dead code\nclass ObsoleteUser:\n    \"\"\"This class is obsolete and should be detected as dead code\"\"\"\n    \n    def __init__(self, name):\n        self.name = name\n    \n    def old_method(self):\n        \"\"\"This method is never called\"\"\"\n        return f\"Old user: {self.name}\"","size":1.5},{"id":"models/user.py:User","name":"User","file":"models/user.py","type":"class","dead":false,"callCount":6,"className":null,"sourceCode":"class User:\n    \"\"\"Represents a user in the system\"\"\"\n    \n    def __init__(self, name: str, age: int):\n        self.name = name\n        self.age = age\n        self._id = self._generate_id()\n    \n    def _generate_id(self) -> str:\n        \"\"\"Generate a unique ID for the user\"\"\"\n        return f\"user_{hash(self.name) % 10000}\"\n    \n    def get_info(self) -> dict:\n        \"\"\"Get user information as dictionary\"\"\"\n        return {\n            \"id\": self._id,\n            \"name\": self.name,\n            \"age\": self.age,\n            \"category\": self.get_age_category()\n        }\n    \n    def get_age_category(self) -> str:\n        \"\"\"Categorize user by age\"\"\"\n        if self.age < 20:\n            return \"young\"\n        elif self.age < 65:\n            return \"adult\"\n        else:\n            return \"senior\"\n    \n    def update_age(self, new_age: int):\n        \"\"\"Update user's age\"\"\"\n        self.age = new_age\n    \n    def __str__(self) -> str:\n        return f\"User({self.name}, {self.age})\"\n    \n    def __repr__(self) -> str:\n        return self.__str__()","size":4.2},{"id":"models/user.py:User.__init__","name":"__init__","file":"models/user.py","type":"function","dead":false,"callCount":4,"className":"User","sourceCode":"    def __init__(self, name: str, age: int):\n        self.name = name\n        self.age = age\n        self._id = self._generate_id()","size":2.3},{"id":"models/user.py:User._generate_id","name":"_generate_id","file":"models/user.py","type":"function","dead":false,"callCount":1,"className":"User","sourceCode":"    def _generate_id(self) -> str:\n        \"\"\"Generate a unique ID for the user\"\"\"\n        return f\"user_{hash(self.name) % 10000}\"","size":1.7},{"id":"models/user.py:User.get_info","name":"get_info","file":"models/user.py","type":"function","dead":false,"callCount":4,"className":"User","sourceCode":"    def get_info(self) -> dict:\n        \"\"\"Get user information as dictionary\"\"\"\n        return {\n            \"id\": self._id,\n            \"name\": self.name,\n            \"age\": self.age,\n            \"category\": self.get_age_category()\n        }","size":2.3},{"id":"models/user.py:User.get_age_category","name":"get_age_category","file":"models/user.py","type":"function","dead":false,"callCount":1,"className":"User","sourceCode":"    def get_age_category(self) -> str:\n        \"\"\"Categorize user by age\"\"\"\n        if self.age < 20:\n            return \"young\"\n        elif self.age < 65:\n            return \"adult\"\n        else:\n            return \"senior\"","size":1.7},{"id":"models/user.py:User.update_age","name":"update_age","file":"models/user.py","type":"function","dead":false,"callCount":0,"className":"User","sourceCode":"    def update_age(self, new_age: int):\n        \"\"\"Update user's age\"\"\"\n        self.age = new_age","size":1.5},{"id":"models/user.py:User.__str__","name":"__str__","file":"models/user.py","type":"function","dead":false,"callCount":1,"className":"User","sourceCode":"    def __str__(self) -> str:\n        return f\"User({self.name}, {self.age})\"","size":1.7},{"id":"models/user.py:User.__repr__","name":"__repr__","file":"models/user.py","type":"function","dead":false,"callCount":0,"className":"User","sourceCode":"    def __repr__(self) -> str:\n        return self.__str__()","size":1.5},{"id":"models/user.py:AdminUser","name":"AdminUser","file":"models/user.py","type":"class","dead":false,"callCount":1,"className":null,"sourceCode":"class AdminUser(User):\n    \"\"\"Administrative user with special privileges\"\"\"\n    \n    def __init__(self, name: str, age: int, permissions: list = None):\n        super().__init__(name, age)\n        self.permissions = permissions or [\"read\", \"write\"]\n    \n    def has_permission(self, permission: str) -> bool:\n        \"\"\"Check if admin has specific permission\"\"\"\n        return permission in self.permissions\n    \n    def add_permission(self, permission: str):\n        \"\"\"Add a new permission\"\"\"\n        if permission not in self.permissions:\n            self.permissions.append(permission)\n    \n    def get_admin_info(self) -> dict:\n        \"\"\"Get admin-specific information\"\"\"\n        info = self.get_info()\n        info[\"permissions\"] = self.permissions\n        info[\"is_admin\"] = True\n        return info","size":3.2},{"id":"models/user.py:AdminUser.__init__","name":"__init__","file":"models/user.py","type":"function","dead":false,"callCount":4,"className":"AdminUser","sourceCode":"    def __init__(self, name: str, age: int, permissions: list = None):\n        super().__init__(name, age)\n        self.permissions = permissions or [\"read\", \"write\"]","size":2.3},{"id":"models/user.py:AdminUser.has_permission","name":"has_permission","file":"models/user.py","type":"function","dead":false,"callCount":0,"className":"AdminUser","sourceCode":"    def has_permission(self, permission: str) -> bool:\n        \"\"\"Check if admin has specific permission\"\"\"\n        return permission in self.permissions","size":1.5},{"id":"models/user.py:AdminUser.add_permission","name":"add_permission","file":"models/user.py","type":"function","dead":false,"callCount":0,"className":"AdminUser","sourceCode":"    def add_permission(self, permission: str):\n        \"\"\"Add a new permission\"\"\"\n        if permission not in self.permissions:\n            self.permissions.append(permission)","size":1.5},{"id":"models/user.py:AdminUser.get_admin_info","name":"get_admin_info","file":"models/user.py","type":"function","dead":false,"callCount":0,"className":"AdminUser","sourceCode":"    def get_admin_info(self) -> dict:\n        \"\"\"Get admin-specific information\"\"\"\n        info = self.get_info()\n        info[\"permissions\"] = self.permissions\n        info[\"is_admin\"] = True\n        return info","size":1.5},{"id":"models/user.py:ObsoleteUser","name":"ObsoleteUser","file":"models/user.py","type":"class","dead":true,"callCount":0,"className":null,"sourceCode":"class ObsoleteUser:\n    \"\"\"This class is obsolete and should be detected as dead code\"\"\"\n    \n    def __init__(self, name):\n        self.name = name\n    \n    def old_method(self):\n        \"\"\"This method is never called\"\"\"\n        return f\"Old user: {self.name}\"","size":3.0},{"id":"models/user.py:ObsoleteUser.__init__","name":"__init__","file":"models/user.py","type":"function","dead":false,"callCount":4,"className":"ObsoleteUser","sourceCode":"    def __init__(self, name):\n        self.name = name","size":2.3},{"id":"models/user.py:ObsoleteUser.old_method","name":"old_method","file":"models/user.py","type":"function","dead":false,"callCount":0,"className":"ObsoleteUser","sourceCode":"    def old_method(self):\n        \"\"\"This method is never called\"\"\"\n        return f\"Old user: {self.name}\"","size":1.5},{"id":"models/__init__.py","name":"__init__","file":"models/__init__.py","type":"module","dead":false,"callCount":0,"className":null,"sourceCode":"\"\"\"Models package for sample project\"\"\"","size":1.5},{"id":"services/data_processor.py","name":"data_processor","file":"services/data_processor.py","type":"module","dead":false,"callCount":0,"className":null,"sourceCode":"\"\"\"Data processing service with various class methods.\"\"\"\n\nfrom typing import List, Dict, Any\nfrom models.user import User\n\n\nclass DataProcessor:\n    \"\"\"Main data processing service.\"\"\"\n    \n    def __init__(self):\n        \"\"\"Initialize data processor.\"\"\"\n        self.processed_count = 0\n        self.cache = {}\n        self.validator = DataValidator()\n    \n    def process_users(self, users: List[User]) -> List[Dict[str, Any]]:\n        \"\"\"Process a list of users.\"\"\"\n        results = []\n        for user in users:\n            if self.validator.validate_user(user):\n                processed = self._process_single_user(user)\n                results.append(processed)\n                self.processed_count += 1\n        \n        return results\n    \n    def _process_single_user(self, user: User) -> Dict[str, Any]:\n        \"\"\"Process a single user (private method).\"\"\"\n        user_info = user.get_info()\n        enhanced_info = self._enhance_user_data(user_info)\n        return enhanced_info\n    \n    def _enhance_user_data(self, user_info: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Enhance user data with additional processing.\"\"\"\n        enhanced = user_info.copy()\n        enhanced['processed_timestamp'] = self._get_timestamp()\n        enhanced['risk_score'] = self._calculate_risk_score(user_info)\n        return enhanced\n    \n    def _get_timestamp(self) -> str:\n        \"\"\"Get current timestamp.\"\"\"\n        from datetime import datetime\n        return datetime.now().isoformat()\n    \n    def _calculate_risk_score(self, user_info: Dict[str, Any]) -> float:\n        \"\"\"Calculate risk score for user.\"\"\"\n        age = user_info.get('age', 0)\n        if age < 18:\n            return 0.1\n        elif age > 65:\n            return 0.3\n        else:\n            return 0.5\n    \n    def get_statistics(self) -> Dict[str, Any]:\n        \"\"\"Get processing statistics.\"\"\"\n        return {\n            'processed_count': self.processed_count,\n            'cache_size': len(self.cache)\n        }\n    \n    def clear_cache(self):\n        \"\"\"Clear processing cache.\"\"\"\n        self.cache.clear()\n\n\nclass DataValidator:\n    \"\"\"Validator for data processing.\"\"\"\n    \n    def __init__(self):\n        \"\"\"Initialize validator.\"\"\"\n        self.validation_rules = self._load_validation_rules()\n    \n    def validate_user(self, user: User) -> bool:\n        \"\"\"Validate user data.\"\"\"\n        if not self._validate_name(user.name):\n            return False\n        if not self._validate_age(user.age):\n            return False\n        return True\n    \n    def _validate_name(self, name: str) -> bool:\n        \"\"\"Validate user name.\"\"\"\n        return isinstance(name, str) and len(name.strip()) > 0\n    \n    def _validate_age(self, age: int) -> bool:\n        \"\"\"Validate user age.\"\"\"\n        return isinstance(age, int) and 0 <= age <= 150\n    \n    def _load_validation_rules(self) -> Dict[str, Any]:\n        \"\"\"Load validation rules.\"\"\"\n        return {\n            'min_age': 0,\n            'max_age': 150,\n            'required_fields': ['name', 'age']\n        }\n\n\nclass DatabaseManager:\n    \"\"\"Database operations manager.\"\"\"\n    \n    def __init__(self, connection_string: str = \"sqlite://memory\"):\n        \"\"\"Initialize database manager.\"\"\"\n        self.connection_string = connection_string\n        self.connection = None\n        self.is_connected = False\n    \n    def connect(self) -> bool:\n        \"\"\"Connect to database.\"\"\"\n        try:\n            # Simulate database connection\n            self.connection = f\"Connected to {self.connection_string}\"\n            self.is_connected = True\n            return True\n        except Exception:\n            return False\n    \n    def disconnect(self):\n        \"\"\"Disconnect from database.\"\"\"\n        self.connection = None\n        self.is_connected = False\n    \n    def save_user(self, user: User) -> bool:\n        \"\"\"Save user to database.\"\"\"\n        if not self.is_connected:\n            self.connect()\n        \n        try:\n            # Simulate saving user\n            user_data = user.get_info()\n            return self._execute_query(\"INSERT\", user_data)\n        except Exception:\n            return False\n    \n    def _execute_query(self, query_type: str, data: Dict[str, Any]) -> bool:\n        \"\"\"Execute database query.\"\"\"\n        # Simulate query execution\n        if query_type == \"INSERT\":\n            return self._insert_data(data)\n        elif query_type == \"UPDATE\":\n            return self._update_data(data)\n        return False\n    \n    def _insert_data(self, data: Dict[str, Any]) -> bool:\n        \"\"\"Insert data into database.\"\"\"\n        # Simulate insert operation\n        return len(data) > 0\n    \n    def _update_data(self, data: Dict[str, Any]) -> bool:\n        \"\"\"Update data in database.\"\"\"\n        # Simulate update operation\n        return 'id' in data\n\n\nclass APIClient:\n    \"\"\"API client for external services.\"\"\"\n    \n    def __init__(self, base_url: str, api_key: str = None):\n        \"\"\"Initialize API client.\"\"\"\n        self.base_url = base_url\n        self.api_key = api_key\n        self.session = self._create_session()\n    \n    def _create_session(self):\n        \"\"\"Create HTTP session.\"\"\"\n        # Simulate session creation\n        return {\n            'headers': {'Authorization': f'Bearer {self.api_key}' if self.api_key else None},\n            'timeout': 30\n        }\n    \n    def get_user_data(self, user_id: str) -> Dict[str, Any]:\n        \"\"\"Get user data from external API.\"\"\"\n        endpoint = f\"/users/{user_id}\"\n        return self._make_request(\"GET\", endpoint)\n    \n    def update_user_data(self, user_id: str, data: Dict[str, Any]) -> bool:\n        \"\"\"Update user data via external API.\"\"\"\n        endpoint = f\"/users/{user_id}\"\n        response = self._make_request(\"PUT\", endpoint, data)\n        return response.get('success', False)\n    \n    def _make_request(self, method: str, endpoint: str, data: Dict[str, Any] = None) -> Dict[str, Any]:\n        \"\"\"Make HTTP request to API.\"\"\"\n        url = f\"{self.base_url}{endpoint}\"\n        \n        # Simulate API call\n        if method == \"GET\":\n            return self._simulate_get_response(endpoint)\n        elif method == \"PUT\":\n            return self._simulate_put_response(data)\n        \n        return {}\n    \n    def _simulate_get_response(self, endpoint: str) -> Dict[str, Any]:\n        \"\"\"Simulate GET response.\"\"\"\n        return {\n            'id': endpoint.split('/')[-1],\n            'data': 'simulated_data',\n            'status': 'success'\n        }\n    \n    def _simulate_put_response(self, data: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Simulate PUT response.\"\"\"\n        return {\n            'success': True,\n            'updated_fields': list(data.keys()) if data else []\n        }\n\n\ndef unused_function_outside_class():\n    \"\"\"This function is never called - dead code.\"\"\"\n    processor = DataProcessor()\n    return processor.get_statistics()","size":1.5},{"id":"services/data_processor.py:DataProcessor","name":"DataProcessor","file":"services/data_processor.py","type":"class","dead":false,"callCount":4,"className":null,"sourceCode":"class DataProcessor:\n    \"\"\"Main data processing service.\"\"\"\n    \n    def __init__(self):\n        \"\"\"Initialize data processor.\"\"\"\n        self.processed_count = 0\n        self.cache = {}\n        self.validator = DataValidator()\n    \n    def process_users(self, users: List[User]) -> List[Dict[str, Any]]:\n        \"\"\"Process a list of users.\"\"\"\n        results = []\n        for user in users:\n            if self.validator.validate_user(user):\n                processed = self._process_single_user(user)\n                results.append(processed)\n                self.processed_count += 1\n        \n        return results\n    \n    def _process_single_user(self, user: User) -> Dict[str, Any]:\n        \"\"\"Process a single user (private method).\"\"\"\n        user_info = user.get_info()\n        enhanced_info = self._enhance_user_data(user_info)\n        return enhanced_info\n    \n    def _enhance_user_data(self, user_info: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Enhance user data with additional processing.\"\"\"\n        enhanced = user_info.copy()\n        enhanced['processed_timestamp'] = self._get_timestamp()\n        enhanced['risk_score'] = self._calculate_risk_score(user_info)\n        return enhanced\n    \n    def _get_timestamp(self) -> str:\n        \"\"\"Get current timestamp.\"\"\"\n        from datetime import datetime\n        return datetime.now().isoformat()\n    \n    def _calculate_risk_score(self, user_info: Dict[str, Any]) -> float:\n        \"\"\"Calculate risk score for user.\"\"\"\n        age = user_info.get('age', 0)\n        if age < 18:\n            return 0.1\n        elif age > 65:\n            return 0.3\n        else:\n            return 0.5\n    \n    def get_statistics(self) -> Dict[str, Any]:\n        \"\"\"Get processing statistics.\"\"\"\n        return {\n            'processed_count': self.processed_count,\n            'cache_size': len(self.cache)\n        }\n    \n    def clear_cache(self):\n        \"\"\"Clear processing cache.\"\"\"\n        self.cache.clear()","size":3.8},{"id":"services/data_processor.py:DataProcessor.__init__","name":"__init__","file":"services/data_processor.py","type":"function","dead":false,"callCount":4,"className":"DataProcessor","sourceCode":"    def __init__(self):\n        \"\"\"Initialize data processor.\"\"\"\n        self.processed_count = 0\n        self.cache = {}\n        self.validator = DataValidator()","size":2.3},{"id":"services/data_processor.py:DataProcessor.process_users","name":"process_users","file":"services/data_processor.py","type":"function","dead":false,"callCount":3,"className":"DataProcessor","sourceCode":"    def process_users(self, users: List[User]) -> List[Dict[str, Any]]:\n        \"\"\"Process a list of users.\"\"\"\n        results = []\n        for user in users:\n            if self.validator.validate_user(user):\n                processed = self._process_single_user(user)\n                results.append(processed)\n                self.processed_count += 1\n        \n        return results","size":2.1},{"id":"services/data_processor.py:DataProcessor._process_single_user","name":"_process_single_user","file":"services/data_processor.py","type":"function","dead":false,"callCount":1,"className":"DataProcessor","sourceCode":"    def _process_single_user(self, user: User) -> Dict[str, Any]:\n        \"\"\"Process a single user (private method).\"\"\"\n        user_info = user.get_info()\n        enhanced_info = self._enhance_user_data(user_info)\n        return enhanced_info","size":1.7},{"id":"services/data_processor.py:DataProcessor._enhance_user_data","name":"_enhance_user_data","file":"services/data_processor.py","type":"function","dead":false,"callCount":1,"className":"DataProcessor","sourceCode":"    def _enhance_user_data(self, user_info: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Enhance user data with additional processing.\"\"\"\n        enhanced = user_info.copy()\n        enhanced['processed_timestamp'] = self._get_timestamp()\n        enhanced['risk_score'] = self._calculate_risk_score(user_info)\n        return enhanced","size":1.7},{"id":"services/data_processor.py:DataProcessor._get_timestamp","name":"_get_timestamp","file":"services/data_processor.py","type":"function","dead":false,"callCount":1,"className":"DataProcessor","sourceCode":"    def _get_timestamp(self) -> str:\n        \"\"\"Get current timestamp.\"\"\"\n        from datetime import datetime\n        return datetime.now().isoformat()","size":1.7},{"id":"services/data_processor.py:DataProcessor._calculate_risk_score","name":"_calculate_risk_score","file":"services/data_processor.py","type":"function","dead":false,"callCount":1,"className":"DataProcessor","sourceCode":"    def _calculate_risk_score(self, user_info: Dict[str, Any]) -> float:\n        \"\"\"Calculate risk score for user.\"\"\"\n        age = user_info.get('age', 0)\n        if age < 18:\n            return 0.1\n        elif age > 65:\n            return 0.3\n        else:\n            return 0.5","size":1.7},{"id":"services/data_processor.py:DataProcessor.get_statistics","name":"get_statistics","file":"services/data_processor.py","type":"function","dead":false,"callCount":3,"className":"DataProcessor","sourceCode":"    def get_statistics(self) -> Dict[str, Any]:\n        \"\"\"Get processing statistics.\"\"\"\n        return {\n            'processed_count': self.processed_count,\n            'cache_size': len(self.cache)\n        }","size":2.1},{"id":"services/data_processor.py:DataProcessor.clear_cache","name":"clear_cache","file":"services/data_processor.py","type":"function","dead":false,"callCount":0,"className":"DataProcessor","sourceCode":"    def clear_cache(self):\n        \"\"\"Clear processing cache.\"\"\"\n        self.cache.clear()","size":1.5},{"id":"services/data_processor.py:DataValidator","name":"DataValidator","file":"services/data_processor.py","type":"class","dead":false,"callCount":1,"className":null,"sourceCode":"class DataValidator:\n    \"\"\"Validator for data processing.\"\"\"\n    \n    def __init__(self):\n        \"\"\"Initialize validator.\"\"\"\n        self.validation_rules = self._load_validation_rules()\n    \n    def validate_user(self, user: User) -> bool:\n        \"\"\"Validate user data.\"\"\"\n        if not self._validate_name(user.name):\n            return False\n        if not self._validate_age(user.age):\n            return False\n        return True\n    \n    def _validate_name(self, name: str) -> bool:\n        \"\"\"Validate user name.\"\"\"\n        return isinstance(name, str) and len(name.strip()) > 0\n    \n    def _validate_age(self, age: int) -> bool:\n        \"\"\"Validate user age.\"\"\"\n        return isinstance(age, int) and 0 <= age <= 150\n    \n    def _load_validation_rules(self) -> Dict[str, Any]:\n        \"\"\"Load validation rules.\"\"\"\n        return {\n            'min_age': 0,\n            'max_age': 150,\n            'required_fields': ['name', 'age']\n        }","size":3.2},{"id":"services/data_processor.py:DataValidator.__init__","name":"__init__","file":"services/data_processor.py","type":"function","dead":false,"callCount":4,"className":"DataValidator","sourceCode":"    def __init__(self):\n        \"\"\"Initialize validator.\"\"\"\n        self.validation_rules = self._load_validation_rules()","size":2.3},{"id":"services/data_processor.py:DataValidator.validate_user","name":"validate_user","file":"services/data_processor.py","type":"function","dead":false,"callCount":1,"className":"DataValidator","sourceCode":"    def validate_user(self, user: User) -> bool:\n        \"\"\"Validate user data.\"\"\"\n        if not self._validate_name(user.name):\n            return False\n        if not self._validate_age(user.age):\n            return False\n        return True","size":1.7},{"id":"services/data_processor.py:DataValidator._validate_name","name":"_validate_name","file":"services/data_processor.py","type":"function","dead":false,"callCount":1,"className":"DataValidator","sourceCode":"    def _validate_name(self, name: str) -> bool:\n        \"\"\"Validate user name.\"\"\"\n        return isinstance(name, str) and len(name.strip()) > 0","size":1.7},{"id":"services/data_processor.py:DataValidator._validate_age","name":"_validate_age","file":"services/data_processor.py","type":"function","dead":false,"callCount":1,"className":"DataValidator","sourceCode":"    def _validate_age(self, age: int) -> bool:\n        \"\"\"Validate user age.\"\"\"\n        return isinstance(age, int) and 0 <= age <= 150","size":1.7},{"id":"services/data_processor.py:DataValidator._load_validation_rules","name":"_load_validation_rules","file":"services/data_processor.py","type":"function","dead":false,"callCount":1,"className":"DataValidator","sourceCode":"    def _load_validation_rules(self) -> Dict[str, Any]:\n        \"\"\"Load validation rules.\"\"\"\n        return {\n            'min_age': 0,\n            'max_age': 150,\n            'required_fields': ['name', 'age']\n        }","size":1.7},{"id":"services/data_processor.py:DatabaseManager","name":"DatabaseManager","file":"services/data_processor.py","type":"class","dead":false,"callCount":3,"className":null,"sourceCode":"class DatabaseManager:\n    \"\"\"Database operations manager.\"\"\"\n    \n    def __init__(self, connection_string: str = \"sqlite://memory\"):\n        \"\"\"Initialize database manager.\"\"\"\n        self.connection_string = connection_string\n        self.connection = None\n        self.is_connected = False\n    \n    def connect(self) -> bool:\n        \"\"\"Connect to database.\"\"\"\n        try:\n            # Simulate database connection\n            self.connection = f\"Connected to {self.connection_string}\"\n            self.is_connected = True\n            return True\n        except Exception:\n            return False\n    \n    def disconnect(self):\n        \"\"\"Disconnect from database.\"\"\"\n        self.connection = None\n        self.is_connected = False\n    \n    def save_user(self, user: User) -> bool:\n        \"\"\"Save user to database.\"\"\"\n        if not self.is_connected:\n            self.connect()\n        \n        try:\n            # Simulate saving user\n            user_data = user.get_info()\n            return self._execute_query(\"INSERT\", user_data)\n        except Exception:\n            return False\n    \n    def _execute_query(self, query_type: str, data: Dict[str, Any]) -> bool:\n        \"\"\"Execute database query.\"\"\"\n        # Simulate query execution\n        if query_type == \"INSERT\":\n            return self._insert_data(data)\n        elif query_type == \"UPDATE\":\n            return self._update_data(data)\n        return False\n    \n    def _insert_data(self, data: Dict[str, Any]) -> bool:\n        \"\"\"Insert data into database.\"\"\"\n        # Simulate insert operation\n        return len(data) > 0\n    \n    def _update_data(self, data: Dict[str, Any]) -> bool:\n        \"\"\"Update data in database.\"\"\"\n        # Simulate update operation\n        return 'id' in data","size":3.6},{"id":"services/data_processor.py:DatabaseManager.__init__","name":"__init__","file":"services/data_processor.py","type":"function","dead":false,"callCount":4,"className":"DatabaseManager","sourceCode":"    def __init__(self, connection_string: str = \"sqlite://memory\"):\n        \"\"\"Initialize database manager.\"\"\"\n        self.connection_string = connection_string\n        self.connection = None\n        self.is_connected = False","size":2.3},{"id":"services/data_processor.py:DatabaseManager.connect","name":"connect","file":"services/data_processor.py","type":"function","dead":false,"callCount":3,"className":"DatabaseManager","sourceCode":"    def connect(self) -> bool:\n        \"\"\"Connect to database.\"\"\"\n        try:\n            # Simulate database connection\n            self.connection = f\"Connected to {self.connection_string}\"\n            self.is_connected = True\n            return True\n        except Exception:\n            return False","size":2.1},{"id":"services/data_processor.py:DatabaseManager.disconnect","name":"disconnect","file":"services/data_processor.py","type":"function","dead":false,"callCount":0,"className":"DatabaseManager","sourceCode":"    def disconnect(self):\n        \"\"\"Disconnect from database.\"\"\"\n        self.connection = None\n        self.is_connected = False","size":1.5},{"id":"services/data_processor.py:DatabaseManager.save_user","name":"save_user","file":"services/data_processor.py","type":"function","dead":false,"callCount":1,"className":"DatabaseManager","sourceCode":"    def save_user(self, user: User) -> bool:\n        \"\"\"Save user to database.\"\"\"\n        if not self.is_connected:\n            self.connect()\n        \n        try:\n            # Simulate saving user\n            user_data = user.get_info()\n            return self._execute_query(\"INSERT\", user_data)\n        except Exception:\n            return False","size":1.7},{"id":"services/data_processor.py:DatabaseManager._execute_query","name":"_execute_query","file":"services/data_processor.py","type":"function","dead":false,"callCount":1,"className":"DatabaseManager","sourceCode":"    def _execute_query(self, query_type: str, data: Dict[str, Any]) -> bool:\n        \"\"\"Execute database query.\"\"\"\n        # Simulate query execution\n        if query_type == \"INSERT\":\n            return self._insert_data(data)\n        elif query_type == \"UPDATE\":\n            return self._update_data(data)\n        return False","size":1.7},{"id":"services/data_processor.py:DatabaseManager._insert_data","name":"_insert_data","file":"services/data_processor.py","type":"function","dead":false,"callCount":1,"className":"DatabaseManager","sourceCode":"    def _insert_data(self, data: Dict[str, Any]) -> bool:\n        \"\"\"Insert data into database.\"\"\"\n        # Simulate insert operation\n        return len(data) > 0","size":1.7},{"id":"services/data_processor.py:DatabaseManager._update_data","name":"_update_data","file":"services/data_processor.py","type":"function","dead":false,"callCount":1,"className":"DatabaseManager","sourceCode":"    def _update_data(self, data: Dict[str, Any]) -> bool:\n        \"\"\"Update data in database.\"\"\"\n        # Simulate update operation\n        return 'id' in data","size":1.7},{"id":"services/data_processor.py:APIClient","name":"APIClient","file":"services/data_processor.py","type":"class","dead":true,"callCount":0,"className":null,"sourceCode":"class APIClient:\n    \"\"\"API client for external services.\"\"\"\n    \n    def __init__(self, base_url: str, api_key: str = None):\n        \"\"\"Initialize API client.\"\"\"\n        self.base_url = base_url\n        self.api_key = api_key\n        self.session = self._create_session()\n    \n    def _create_session(self):\n        \"\"\"Create HTTP session.\"\"\"\n        # Simulate session creation\n        return {\n            'headers': {'Authorization': f'Bearer {self.api_key}' if self.api_key else None},\n            'timeout': 30\n        }\n    \n    def get_user_data(self, user_id: str) -> Dict[str, Any]:\n        \"\"\"Get user data from external API.\"\"\"\n        endpoint = f\"/users/{user_id}\"\n        return self._make_request(\"GET\", endpoint)\n    \n    def update_user_data(self, user_id: str, data: Dict[str, Any]) -> bool:\n        \"\"\"Update user data via external API.\"\"\"\n        endpoint = f\"/users/{user_id}\"\n        response = self._make_request(\"PUT\", endpoint, data)\n        return response.get('success', False)\n    \n    def _make_request(self, method: str, endpoint: str, data: Dict[str, Any] = None) -> Dict[str, Any]:\n        \"\"\"Make HTTP request to API.\"\"\"\n        url = f\"{self.base_url}{endpoint}\"\n        \n        # Simulate API call\n        if method == \"GET\":\n            return self._simulate_get_response(endpoint)\n        elif method == \"PUT\":\n            return self._simulate_put_response(data)\n        \n        return {}\n    \n    def _simulate_get_response(self, endpoint: str) -> Dict[str, Any]:\n        \"\"\"Simulate GET response.\"\"\"\n        return {\n            'id': endpoint.split('/')[-1],\n            'data': 'simulated_data',\n            'status': 'success'\n        }\n    \n    def _simulate_put_response(self, data: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Simulate PUT response.\"\"\"\n        return {\n            'success': True,\n            'updated_fields': list(data.keys()) if data else []\n        }","size":3.0},{"id":"services/data_processor.py:APIClient.__init__","name":"__init__","file":"services/data_processor.py","type":"function","dead":false,"callCount":4,"className":"APIClient","sourceCode":"    def __init__(self, base_url: str, api_key: str = None):\n        \"\"\"Initialize API client.\"\"\"\n        self.base_url = base_url\n        self.api_key = api_key\n        self.session = self._create_session()","size":2.3},{"id":"services/data_processor.py:APIClient._create_session","name":"_create_session","file":"services/data_processor.py","type":"function","dead":false,"callCount":1,"className":"APIClient","sourceCode":"    def _create_session(self):\n        \"\"\"Create HTTP session.\"\"\"\n        # Simulate session creation\n        return {\n            'headers': {'Authorization': f'Bearer {self.api_key}' if self.api_key else None},\n            'timeout': 30\n        }","size":1.7},{"id":"services/data_processor.py:APIClient.get_user_data","name":"get_user_data","file":"services/data_processor.py","type":"function","dead":false,"callCount":0,"className":"APIClient","sourceCode":"    def get_user_data(self, user_id: str) -> Dict[str, Any]:\n        \"\"\"Get user data from external API.\"\"\"\n        endpoint = f\"/users/{user_id}\"\n        return self._make_request(\"GET\", endpoint)","size":1.5},{"id":"services/data_processor.py:APIClient.update_user_data","name":"update_user_data","file":"services/data_processor.py","type":"function","dead":false,"callCount":0,"className":"APIClient","sourceCode":"    def update_user_data(self, user_id: str, data: Dict[str, Any]) -> bool:\n        \"\"\"Update user data via external API.\"\"\"\n        endpoint = f\"/users/{user_id}\"\n        response = self._make_request(\"PUT\", endpoint, data)\n        return response.get('success', False)","size":1.5},{"id":"services/data_processor.py:APIClient._make_request","name":"_make_request","file":"services/data_processor.py","type":"function","dead":false,"callCount":2,"className":"APIClient","sourceCode":"    def _make_request(self, method: str, endpoint: str, data: Dict[str, Any] = None) -> Dict[str, Any]:\n        \"\"\"Make HTTP request to API.\"\"\"\n        url = f\"{self.base_url}{endpoint}\"\n        \n        # Simulate API call\n        if method == \"GET\":\n            return self._simulate_get_response(endpoint)\n        elif method == \"PUT\":\n            return self._simulate_put_response(data)\n        \n        return {}","size":1.9},{"id":"services/data_processor.py:APIClient._simulate_get_response","name":"_simulate_get_response","file":"services/data_processor.py","type":"function","dead":false,"callCount":1,"className":"APIClient","sourceCode":"    def _simulate_get_response(self, endpoint: str) -> Dict[str, Any]:\n        \"\"\"Simulate GET response.\"\"\"\n        return {\n            'id': endpoint.split('/')[-1],\n            'data': 'simulated_data',\n            'status': 'success'\n        }","size":1.7},{"id":"services/data_processor.py:APIClient._simulate_put_response","name":"_simulate_put_response","file":"services/data_processor.py","type":"function","dead":false,"callCount":1,"className":"APIClient","sourceCode":"    def _simulate_put_response(self, data: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Simulate PUT response.\"\"\"\n        return {\n            'success': True,\n            'updated_fields': list(data.keys()) if data else []\n        }","size":1.7},{"id":"services/data_processor.py:unused_function_outside_class","name":"unused_function_outside_class","file":"services/data_processor.py","type":"function","dead":true,"callCount":0,"className":null,"sourceCode":"def unused_function_outside_class():\n    \"\"\"This function is never called - dead code.\"\"\"\n    processor = DataProcessor()\n    return processor.get_statistics()","size":1.5},{"id":"services/__init__.py","name":"__init__","file":"services/__init__.py","type":"module","dead":false,"callCount":0,"className":null,"sourceCode":"","size":1.5}],"links":[{"source":"main.py:main","target":"builtins:print"},{"source":"main.py:main","target":"models/user.py:User"},{"source":"main.py:main","target":"models/user.py:User"},{"source":"main.py:main","target":"models/user.py:AdminUser"},{"source":"main.py:main","target":"services/data_processor.py:DataProcessor"},{"source":"main.py:main","target":"services/data_processor.py:DatabaseManager"},{"source":"main.py:main","target":"main.py:connect"},{"source":"main.py:main","target":"main.py:process_users"},{"source":"main.py:main","target":"api/handlers.py:UserHandler"},{"source":"main.py:main","target":"api/handlers.py:AdminHandler"},{"source":"main.py:main","target":"api/handlers.py:HealthHandler"},{"source":"main.py:main","target":"main.py:create_user"},{"source":"main.py:main","target":"main.py:get_system_stats"},{"source":"main.py:main","target":"main.py:check_health"},{"source":"main.py:main","target":"utils.py:calculate_sum"},{"source":"main.py:main","target":"utils.py:format_output"},{"source":"main.py:main","target":"builtins:print"},{"source":"main.py:main","target":"builtins:print"},{"source":"main.py:main","target":"main.py:unused_function"},{"source":"main.py:another_unused_function","target":"main.py:calculate_complex_operation"},{"source":"main.py:__module__","target":"main.py:main"},{"source":"utils.py:calculate_sum","target":"builtins:sum"},{"source":"utils.py:format_output","target":"builtins:len"},{"source":"utils.py:helper_function","target":"builtins:upper"},{"source":"api/handlers.py:BaseHandler.__init__","target":"api/handlers.py:_setup_logger"},{"source":"api/handlers.py:BaseHandler._validate_request","target":"builtins:isinstance"},{"source":"api/handlers.py:BaseHandler._validate_request","target":"builtins:len"},{"source":"api/handlers.py:BaseHandler._format_response","target":"api/handlers.py:_generate_request_id"},{"source":"api/handlers.py:BaseHandler._generate_request_id","target":"builtins:hash"},{"source":"api/handlers.py:UserHandler.__init__","target":"builtins:__init__"},{"source":"api/handlers.py:UserHandler.__init__","target":"builtins:super"},{"source":"api/handlers.py:UserHandler.__init__","target":"services/data_processor.py:DataProcessor"},{"source":"api/handlers.py:UserHandler.__init__","target":"services/data_processor.py:DatabaseManager"},{"source":"api/handlers.py:UserHandler.create_user","target":"api/handlers.py:_log_request"},{"source":"api/handlers.py:UserHandler.create_user","target":"api/handlers.py:_validate_user_data"},{"source":"api/handlers.py:UserHandler.create_user","target":"api/handlers.py:_format_response"},{"source":"api/handlers.py:UserHandler.create_user","target":"api/handlers.py:_create_user_object"},{"source":"api/handlers.py:UserHandler.create_user","target":"api/handlers.py:save_user"},{"source":"api/handlers.py:UserHandler.create_user","target":"api/handlers.py:_format_response"},{"source":"api/handlers.py:UserHandler.create_user","target":"api/handlers.py:get_info"},{"source":"api/handlers.py:UserHandler.create_user","target":"api/handlers.py:_format_response"},{"source":"api/handlers.py:UserHandler.get_user","target":"api/handlers.py:_log_request"},{"source":"api/handlers.py:UserHandler.get_user","target":"api/handlers.py:_fetch_user_from_db"},{"source":"api/handlers.py:UserHandler.get_user","target":"api/handlers.py:process_users"},{"source":"api/handlers.py:UserHandler.get_user","target":"api/handlers.py:_format_response"},{"source":"api/handlers.py:UserHandler.get_user","target":"api/handlers.py:_format_response"},{"source":"api/handlers.py:UserHandler.update_user","target":"api/handlers.py:_log_request"},{"source":"api/handlers.py:UserHandler.update_user","target":"api/handlers.py:_validate_update_data"},{"source":"api/handlers.py:UserHandler.update_user","target":"api/handlers.py:_format_response"},{"source":"api/handlers.py:UserHandler.update_user","target":"api/handlers.py:_perform_user_update"},{"source":"api/handlers.py:UserHandler.update_user","target":"api/handlers.py:_format_response"},{"source":"api/handlers.py:UserHandler.delete_user","target":"api/handlers.py:_log_request"},{"source":"api/handlers.py:UserHandler.delete_user","target":"api/handlers.py:_perform_user_deletion"},{"source":"api/handlers.py:UserHandler.delete_user","target":"api/handlers.py:_format_response"},{"source":"api/handlers.py:UserHandler._validate_user_data","target":"builtins:all"},{"source":"api/handlers.py:UserHandler._validate_update_data","target":"builtins:any"},{"source":"api/handlers.py:UserHandler._create_user_object","target":"models/user.py:User"},{"source":"api/handlers.py:UserHandler._fetch_user_from_db","target":"models/user.py:User"},{"source":"api/handlers.py:UserHandler._perform_user_update","target":"builtins:len"},{"source":"api/handlers.py:UserHandler._perform_user_deletion","target":"builtins:len"},{"source":"api/handlers.py:AdminHandler.__init__","target":"builtins:__init__"},{"source":"api/handlers.py:AdminHandler.__init__","target":"builtins:super"},{"source":"api/handlers.py:AdminHandler.__init__","target":"api/handlers.py:_load_admin_permissions"},{"source":"api/handlers.py:AdminHandler.get_all_users","target":"api/handlers.py:_log_request"},{"source":"api/handlers.py:AdminHandler.get_all_users","target":"api/handlers.py:_check_admin_permission"},{"source":"api/handlers.py:AdminHandler.get_all_users","target":"api/handlers.py:_format_response"},{"source":"api/handlers.py:AdminHandler.get_all_users","target":"api/handlers.py:_fetch_all_users"},{"source":"api/handlers.py:AdminHandler.get_all_users","target":"api/handlers.py:process_users"},{"source":"api/handlers.py:AdminHandler.get_all_users","target":"api/handlers.py:_format_response"},{"source":"api/handlers.py:AdminHandler.get_system_stats","target":"api/handlers.py:_log_request"},{"source":"api/handlers.py:AdminHandler.get_system_stats","target":"api/handlers.py:_check_admin_permission"},{"source":"api/handlers.py:AdminHandler.get_system_stats","target":"api/handlers.py:_format_response"},{"source":"api/handlers.py:AdminHandler.get_system_stats","target":"api/handlers.py:_collect_system_stats"},{"source":"api/handlers.py:AdminHandler.get_system_stats","target":"api/handlers.py:_format_response"},{"source":"api/handlers.py:AdminHandler.bulk_delete_users","target":"api/handlers.py:_log_request"},{"source":"api/handlers.py:AdminHandler.bulk_delete_users","target":"api/handlers.py:_check_admin_permission"},{"source":"api/handlers.py:AdminHandler.bulk_delete_users","target":"api/handlers.py:_format_response"},{"source":"api/handlers.py:AdminHandler.bulk_delete_users","target":"api/handlers.py:_perform_bulk_deletion"},{"source":"api/handlers.py:AdminHandler.bulk_delete_users","target":"api/handlers.py:_format_response"},{"source":"api/handlers.py:AdminHandler._fetch_all_users","target":"models/user.py:User"},{"source":"api/handlers.py:AdminHandler._fetch_all_users","target":"models/user.py:User"},{"source":"api/handlers.py:AdminHandler._collect_system_stats","target":"api/handlers.py:get_statistics"},{"source":"api/handlers.py:AdminHandler._perform_bulk_deletion","target":"api/handlers.py:_perform_user_deletion"},{"source":"api/handlers.py:AdminHandler._perform_bulk_deletion","target":"builtins:len"},{"source":"api/handlers.py:HealthHandler.__init__","target":"builtins:__init__"},{"source":"api/handlers.py:HealthHandler.__init__","target":"builtins:super"},{"source":"api/handlers.py:HealthHandler.__init__","target":"api/handlers.py:_initialize_health_checkers"},{"source":"api/handlers.py:HealthHandler.check_health","target":"api/handlers.py:_log_request"},{"source":"api/handlers.py:HealthHandler.check_health","target":"builtins:items"},{"source":"api/handlers.py:HealthHandler.check_health","target":"api/handlers.py:checker"},{"source":"api/handlers.py:HealthHandler.check_health","target":"builtins:get"},{"source":"api/handlers.py:HealthHandler.check_health","target":"builtins:str"},{"source":"api/handlers.py:HealthHandler.check_health","target":"api/handlers.py:_format_response"},{"source":"api/handlers.py:HealthHandler._check_database_health","target":"services/data_processor.py:DatabaseManager"},{"source":"api/handlers.py:HealthHandler._check_database_health","target":"api/handlers.py:connect"},{"source":"api/handlers.py:HealthHandler._check_processor_health","target":"services/data_processor.py:DataProcessor"},{"source":"api/handlers.py:HealthHandler._check_processor_health","target":"api/handlers.py:get_statistics"},{"source":"api/handlers.py:create_api_router","target":"api/handlers.py:UserHandler"},{"source":"api/handlers.py:create_api_router","target":"api/handlers.py:AdminHandler"},{"source":"api/handlers.py:create_api_router","target":"api/handlers.py:HealthHandler"},{"source":"models/user.py:User.__init__","target":"models/user.py:_generate_id"},{"source":"models/user.py:User._generate_id","target":"builtins:hash"},{"source":"models/user.py:User.get_info","target":"models/user.py:get_age_category"},{"source":"models/user.py:User.__repr__","target":"builtins:__str__"},{"source":"models/user.py:AdminUser.__init__","target":"builtins:__init__"},{"source":"models/user.py:AdminUser.__init__","target":"builtins:super"},{"source":"models/user.py:AdminUser.add_permission","target":"builtins:append"},{"source":"models/user.py:AdminUser.get_admin_info","target":"models/user.py:get_info"},{"source":"services/data_processor.py:DataProcessor.__init__","target":"services/data_processor.py:DataValidator"},{"source":"services/data_processor.py:DataProcessor.process_users","target":"services/data_processor.py:validate_user"},{"source":"services/data_processor.py:DataProcessor.process_users","target":"services/data_processor.py:_process_single_user"},{"source":"services/data_processor.py:DataProcessor.process_users","target":"builtins:append"},{"source":"services/data_processor.py:DataProcessor._process_single_user","target":"services/data_processor.py:get_info"},{"source":"services/data_processor.py:DataProcessor._process_single_user","target":"services/data_processor.py:_enhance_user_data"},{"source":"services/data_processor.py:DataProcessor._enhance_user_data","target":"builtins:copy"},{"source":"services/data_processor.py:DataProcessor._enhance_user_data","target":"services/data_processor.py:_get_timestamp"},{"source":"services/data_processor.py:DataProcessor._enhance_user_data","target":"services/data_processor.py:_calculate_risk_score"},{"source":"services/data_processor.py:DataProcessor._get_timestamp","target":"services/data_processor.py:isoformat"},{"source":"services/data_processor.py:DataProcessor._get_timestamp","target":"services/data_processor.py:now"},{"source":"services/data_processor.py:DataProcessor._calculate_risk_score","target":"builtins:get"},{"source":"services/data_processor.py:DataProcessor.get_statistics","target":"builtins:len"},{"source":"services/data_processor.py:DataProcessor.clear_cache","target":"builtins:clear"},{"source":"services/data_processor.py:DataValidator.__init__","target":"services/data_processor.py:_load_validation_rules"},{"source":"services/data_processor.py:DataValidator.validate_user","target":"services/data_processor.py:_validate_name"},{"source":"services/data_processor.py:DataValidator.validate_user","target":"services/data_processor.py:_validate_age"},{"source":"services/data_processor.py:DataValidator._validate_name","target":"builtins:isinstance"},{"source":"services/data_processor.py:DataValidator._validate_name","target":"builtins:len"},{"source":"services/data_processor.py:DataValidator._validate_name","target":"builtins:strip"},{"source":"services/data_processor.py:DataValidator._validate_age","target":"builtins:isinstance"},{"source":"services/data_processor.py:DatabaseManager.save_user","target":"services/data_processor.py:connect"},{"source":"services/data_processor.py:DatabaseManager.save_user","target":"services/data_processor.py:get_info"},{"source":"services/data_processor.py:DatabaseManager.save_user","target":"services/data_processor.py:_execute_query"},{"source":"services/data_processor.py:DatabaseManager._execute_query","target":"services/data_processor.py:_insert_data"},{"source":"services/data_processor.py:DatabaseManager._execute_query","target":"services/data_processor.py:_update_data"},{"source":"services/data_processor.py:DatabaseManager._insert_data","target":"builtins:len"},{"source":"services/data_processor.py:APIClient.__init__","target":"services/data_processor.py:_create_session"},{"source":"services/data_processor.py:APIClient.get_user_data","target":"services/data_processor.py:_make_request"},{"source":"services/data_processor.py:APIClient.update_user_data","target":"services/data_processor.py:_make_request"},{"source":"services/data_processor.py:APIClient.update_user_data","target":"builtins:get"},{"source":"services/data_processor.py:APIClient._make_request","target":"services/data_processor.py:_simulate_get_response"},{"source":"services/data_processor.py:APIClient._make_request","target":"services/data_processor.py:_simulate_put_response"},{"source":"services/data_processor.py:APIClient._simulate_get_response","target":"builtins:split"},{"source":"services/data_processor.py:APIClient._simulate_put_response","target":"builtins:list"},{"source":"services/data_processor.py:APIClient._simulate_put_response","target":"builtins:keys"},{"source":"services/data_processor.py:unused_function_outside_class","target":"services/data_processor.py:DataProcessor"},{"source":"services/data_processor.py:unused_function_outside_class","target":"services/data_processor.py:get_statistics"}]}